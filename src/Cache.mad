import type { Maybe } from "Maybe"

import Byte from "Byte"
import ByteArray from "ByteArray"
import Dict from "Dictionary"
import Integer from "Integer"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"

import { softSet } from "@/Dictionary"



// export alias CacheOptions = { limit :: Byte, onEvict :: a -> b -> {} }

export alias Evict a b = a -> b -> {}

export alias EventMap = { evict :: a -> b -> {} }

export alias Storage a b = {
  free :: ByteArray,
  head :: Integer,
  keys :: List a,
  max :: Byte,
  next :: ByteArray,
  prev :: ByteArray,
  size :: Byte,
  tail :: Integer,
  values :: List b,
}
export type Cache a b
  = Cache(
    // weights & states
    Storage a b,
    // let your fans know
    EventMap,
    // data
    Dictionary a b,
  )

// CONSTRUCTORS

createStore :: Byte -> Storage a b
export createStore = (max) => {
  // the cheat is to the limit
  limit = Integer.fromByte(max)
  return (
    {
      free: ByteArray.init(limit),
      head: 0,
      max,
      next: ByteArray.init(limit),
      prev: ByteArray.init(limit),
      tail: 0,
      keys: [],
      values: [],
      size: 0_b,
    }
  )
}

// FIELDS

store :: Cache a b -> Storage a b
export store = where {
  Cache(s, _, _) =>
    s
}

events :: Cache a b -> EventMap
export events = where {
  Cache(_, p, _) =>
    p
}

data :: Cache a b -> Dictionary a b
export data = where {
  Cache(_, _, d) =>
    d
}

// UTILITIES

// _expunge :: Storage a b -> Storage a b
_evict = (state, ev, d) => {
  return pipe(
    (i) => #[List.nth(i, state.keys), List.nth(i, state.values)],
    where {
      #[Just(key), Just(value)] =>
        do {
          ev.evict(key, value)
          newD = Dict.remove(key, d)
          // this seems patently incorrect
          // maybe we need to have a list of Maybes so we can Nothing them out?
          state.keys := List.set(state.head, {}, state.keys)
          state.values := List.set(state.head, {}, state.values)
          newHeadMaybe = List.nth(state.head, state.next)
          return #[0, state, newD]
        }

      _ =>
        #[0, state, d]
    },
  )(state.head)
  // return #[0, x]
}

_pop = (state, ev, d) => {
  // w = ByteArray.unsafeAt(fLen, state.free)
  //            free2 = ByteArray.slice(0, fLen, state.free)
  // { ...state, free: free2 }
  return #[0, state, d]
}

_updateState = (state, ev, d) => {
  return #[0, state, d]
}

handleEmptyIndex = (state, ev, d) => {
  fLen = ByteArray.length(state.free)
  call = if (state.size == state.max) {
    _evict
  } else if (fLen > 0) {
    _pop
  } else {
    _updateState
  }
  return call(state, ev, d)
}

// tailStorage :: Boolean -> Integer -> Storage a b -> Storage a b
export tailStorage = (setterMode, index, _store) => {
  return if (index == _store.tail) {
    _store
  } else do {
    nextIndex = ByteArray.unsafeAt(index, _store.next)
    prevIndex = ByteArray.unsafeAt(index, _store.prev)
    if (index == _store.head) do {
      _store.head := Integer.fromByte(nextIndex)
    } else if (!setterMode || prevIndex != 0) do {
      _store.next := ByteArray.unsafeSet(Integer.fromByte(prevIndex), nextIndex, _store.next)
    }
    if (nextIndex != 0) do {
      _store.next := ByteArray.unsafeSet(Integer.fromByte(nextIndex), prevIndex, _store.prev)
    }
    _store.next := ByteArray.unsafeSet(_store.tail, Byte.fromInteger(index), _store.next)
    _store.prev := ByteArray.unsafeSet(index, Byte.fromInteger(_store.tail), _store.prev)
    _store.next := ByteArray.unsafeSet(index, 0, _store.next)
    _store.tail := index
    return _store
  }
}

/**
 * Adds a a value to the cache.
 * Updates the value if the key already exists
 */
// set :: Comparable a => a -> Byte -> Cache a Byte -> Cache a Byte
set :: Integer -> Integer -> Cache Integer Integer -> Cache Integer Integer
export set = (k, v, c) => where(c) {
  Cache(state, ev, d) =>
    pipe(
      Dict.get(k),
      where {
        Nothing =>
          handleEmptyIndex(state, ev, d)

        Just(w) =>
          do {
            // notice
            ev.evict(k, w)
            return #[w, state]
          }
      },
      where {
        #[index, newState] =>
          do {
            copyState = newState
            newValues = List.set(index, v, copyState.values)

            if (state.size == 1) do {
              copyState.head := index
              copyState.tail := index
            } else do {
              copyState := tailStorage(true, index, copyState)
            }

            return Cache({ ...copyState, values: newValues }, ev, d)
          }
      },
    )(d)
}

// cache :: CacheOptions -> Maybe (Dictionary a b)
// export cache = (opts) => where(opts) {
//   { limit, onEvict } =>
//     do {
//       state = Dict.empty
//       return if (limit < 0) {
//         Nothing
//       } else do {
//
//         return {
//           set,
//           get,
//           peek,
//           has,
//           keys,
//           values,
//           toList,
//           delete,
//           evict,
//           clear,
//           max,
//           size,
//           available,
//         }
//       }
//     }
// }
